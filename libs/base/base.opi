{- file: base/base.opi -}
load "base.so"
load "common.opi"
load "list-base.opi"

let zero? x = x == 0
let positive? x = x > 0
let negative? x = x < 0
let even? x = x % 2 == 0
let odd? x = x % 2 /= 0

let trim = chomp . ltrim


let caar = car . car
let cadr = car . cdr
let cdar = cdr . car
let cddr = cdr . cdr

--------------------------------------------------------------------------------
-- Seq utilities
--
trait ToSeq =
  let toSeq
end

impl ToSeq for Seq  = let toSeq = id         end
impl ToSeq for Cons = let toSeq = List.toSeq end
impl ToSeq for Nil  = let toSeq = List.toSeq end

trait ToRevSeq =
  let toRevSeq
end

-- TODO: use ToRevSeq
-- TODO: check if type already matches
-- TODO: Array.foldl, Array.foldr, List.foldl
let rlist = List.ofRevSeq . ToSeq.toSeq

let list = reverse . rlist
  --if x is Array then Array.toList x
  --else if x is ToList then ToList.toList x
  --else if x is ToRevSeq then rlist $ ToRevSeq.toRevSeq x
  --else reverse $ rlist x

let array = Array.ofSeq . ToSeq.toSeq
let table = (Table) . list

let foreach f = Seq.iter f . ToSeq.toSeq
let map f = Seq.map f . ToSeq.toSeq
let zip x y = Seq.zip (ToSeq.toSeq x) (ToSeq.toSeq y)
let filter f = Seq.filter f . ToSeq.toSeq
let foldl f z = Seq.foldl f z . ToSeq.toSeq

let unfold = Seq.unfold

let range from to =
  unfold (fn i -> if i < to then i : i + 1) from

--------------------------------------------------------------------------------
-- I/O
--
module File =
  let dup file ..mode = __base_file_dup file (car mode or "r")
end

let open path ..mode = __base_open path (car mode or "r")
let popen cmd ..mode = __base_popen cmd (car mode or "r")

let write x = printf "%w" x
let display x = printf "%d" x

let read = __base_read
let readline = __base_readline
let readlines file =
  assert file? file;
  unfold (fn s ->
    let file =
      if let [file] = s then
        (File.dup file) -- duplicate file stream to own cursor
      else s
    in
    let line = readline file in
    if line then line : file else nil
  ) [file] -- to indicate first iteration

impl ToSeq for File =
  let toSeq = readlines
end

