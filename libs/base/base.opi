{- file: base/base.opi -}
load "base.so"
load "common.opi"
load "list-base.opi"

let zero? x = x == 0
let positive? x = x > 0
let negative? x = x < 0
let even? x = x % 2 == 0
let odd? x = x % 2 /= 0

let trim = chomp . ltrim

let open path ..mode = __builtin_open path (car mode or "r")
let popen cmd ..mode = __builtin_popen cmd (car mode or "r")

let write x = printf "%w" x
let display x = printf "%d" x

trait ToSeq =
  let toSeq
end

impl ToSeq for Seq =
  let toSeq = id
end

impl ToSeq for Cons =
  let toSeq = List.toSeq
end

trait ToRevSeq =
  let toRevSeq
end


-- TODO: use ToRevSeq
-- TODO: check if type already matches
-- TODO: Array.foldl, Array.foldr, List.foldl

let rlist = List.ofRevSeq . ToSeq.toSeq
let list = reverse . rlist
let array = Array.ofSeq . ToSeq.toSeq
let table = (Table) . list

let foreach f = Seq.iter f . ToSeq.toSeq
let map f = Seq.map f . ToSeq.toSeq
let filter f = Seq.filter f . ToSeq.toSeq
let foldl f z = Seq.foldl f z . ToSeq.toSeq

let unfold = Seq.unfold

let range from to =
  unfold (fn i -> if i < to then i : i + 1) from
