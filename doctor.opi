#!/bin/env opium

# Show help and exit.
let helpAndExit out err =
  fprintf out "\
usage: %{car Sys.argv} [OPTIONS] COMMAND

OPTIONS:
  path <opium-path>
  force
  clean

COMMANDS:
  help
  install <path>
";
  exit err

# Parse command-line arguments into table.
let rec parseArgs args =
  unless let arg:args = args then nil
  else if arg eq "help" then helpAndExit stdout 0
  else if arg eq "force" then ('force: true) : parseArgs args
  else if arg eq "clean" then ('clean: true) : parseArgs args
  else if arg eq "install" then
    if let path:args = args then ('install: path) : parseArgs args
    else die "missing path argument to install"
  else if arg eq "remove" then
    if let name:args = args then ('remove: name) : parseArgs args
    else die "missing argument to remove"
  else if arg eq "path" then
    if let path:args = args then ('path: path) : parseArgs args
    else die "missing opium-path argument"
  else die "unknown command-line option"

# Get full path given a relative one.
let realpath path = `test -e '%{path}' && realpath '%{path}'`

# Parsed command-line options.
let cmdArgs = table . parseArgs $ cdr Sys.argv

# Force mode.
let force? = when cmdArgs::force then true else false

# Path to opium libraries.
let installPath = cmdArgs::path or Sys.env::OPIUM_PATH or
  die "path to opium libraries not set"

# Install package.
let install () =
  let packageRoot = realpath cmdArgs::install
  or die "failed to resolve package directory"
  in

  # find install-script
  let installScript = "%{packageRoot}/install.opi" in
  `test -f %{installScript}` or die "missing install-script";

  # load installer
  let installEnv = [installPath, packageRoot] in
  let config = loadfile installScript installEnv in
  print "package %{config::name}";

  # resolve fields
  let packageName = config::name in
  let packageMain = config::main in
  let packageFiles = config::files or [packageMain] in
  let packageBuild = config::build or \_ -> nil in
  let packagePostinstall = config::postinstall or \_ -> nil in

  print "building...";
  # build package
  packageBuild packageRoot;

  print "installing...";
  # create package's private directory for dependencies
  let packageDirName = "%{packageName}-dir" in
  let packageInstallPath = "%{installPath}/%{packageDirName}" in
  `mkdir %{force? && "-p" || ""} %{packageInstallPath}`
  or die "failed to create package directory, try force-option to proceed";
  # copy dependencies
  let copy file =
    `cp %{packageRoot}/%{file} %{packageInstallPath}`
    or die "failed to copy \"%{file}\""
  in foreach copy packageFiles;
  # create symlink to the main script
  let rel_path = "%{packageDirName}/%{packageMain}" in
  let link_path = "%{installPath}/%{packageName}" in
  `ln -s %{force? && "-f" || ""} %{rel_path} %{link_path}`;

  when cmdArgs::clean then begin
    print "running post-install hooks...";
    packagePostinstall packageRoot;
  end;

  print "package %{packageName} was succesfully installed to %{installPath}"

# Reomve package.
let remove () =
  let packageName = cmdArgs::remove in
  system "rm -rfv %{installPath}/%{packageName}{,-dir}"

# MAIN:
begin
  when cmdArgs::install then install ()
  else when cmdArgs::remove then remove ()
  else die "\
neither of install nor remove commands specified, see help (%{car Sys.argv}) for
list of available commands and options\
"
end

