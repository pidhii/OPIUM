load "base"

let l = range 0 100 in
print $ all? number? l;
print $ any? string? l

let stream? x =
  unless let head:tail = x then false
  else if let lazy { } = tail then true
  else false

namespace stream {
  let car = car
  let cdr = force . cdr

  let null? = null?

  let rec map f s =
    unless let head:tail = s then nil
    else f head : lazy map f (force tail)
}

let _ =
  print "HOME (from shell) = %{ `echo $HOME` }";
  print "argv = %{ARGV}";
  print "HOME (from ENV) = %{ENV#HOME}"

let add x y = if y > 0 then x + y else error 'OloLo in
--let add x y = x + y in
print $ foldl add 0 $ revfilter even? $ range 0 10000000;
print $ flip map [1 2 3] (add 1);

