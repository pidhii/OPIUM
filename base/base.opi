load "base.so"

let (+) x y = x + y
let (-) x y = x - y
let (*) x y = x * y
let (/) x y = x / y
let (%) x y = x % y
let (:) x y = x : y
let (is not) x y = x is not y
let (not eq) x y = x not eq y
let (not equal) x y = x not equal y
let (||) x y = x || y
let (&&) x y = x && y
let (==) x y = x == y
let (/=) x y = x /= y
let (<) x y = x < y
let (>) x y = x > y
let (<=) x y = x <= y
let (>=) x y = x >= y
let ($) f x = f x
let (|>) x f = f x

let const x _ = x
let flip f x y = f y x
let uncurry f (p1:p2) = f p1 p2

let zero? x = x == 0
let positive? x = x > 0
let negative? x = x < 0
let even? x = x % 2 == 0
let odd? x = x % 2 /= 0
let trim = rtrim . ltrim

let reverse l = revappend l nil

--let car x = let head:_ = x in head
--let cdr x = let _:tail = x in tail

--------------------------------------------------------------------------------
-- Seq utilities
--
trait Length = let length end
use Length.length

impl Length for Cons = let length = List.length end
impl Length for Array = let length = Array.length end
impl Length for Seq = let length = Array.length . Array.ofSeq end

trait ToSeq =
  let toSeq
end

trait ToList =
  let toList
end

trait ToRevSeq =
  let toRevSeq
end

impl ToSeq for Seq   = let toSeq = id                 end
impl ToSeq for Cons  = let toSeq = List.toSeq         end
impl ToSeq for Nil   = let toSeq = List.toSeq         end
impl ToSeq for Table = let toSeq = List.toSeq . pairs end
impl ToSeq for Array = let toSeq = Array.toSeq        end

impl ToList for Array = let toList = Array.toList end
impl ToList for Table = let toList = pairs        end

-- TODO: Array.toSeq, Array.foldl, Array.foldr, List.foldl
let rlist x =
  if x is nil then x
  else if x is Cons then reverse x
  else if x is Array then Array.toRevList x
  else List.ofRevSeq $ ToSeq.toSeq x

let list x = --reverse . rlist
  if x is Cons || x is nil then x
  else if x is ToList then ToList.toList x
  else if x is ToRevSeq then rlist $ ToRevSeq.toRevSeq x
  else reverse $ rlist x

let array x =
  if x is Array then x
  else Array.ofSeq $ ToSeq.toSeq x

let table x =
  if x is Table then x
  else Table $ list x

let foreach f = Seq.iter f . ToSeq.toSeq
let map f = Seq.map f . ToSeq.toSeq
let zip x y = Seq.zip (ToSeq.toSeq x) (ToSeq.toSeq y)
let filter f = Seq.filter f . ToSeq.toSeq
let foldl f z = Seq.foldl f z . ToSeq.toSeq
let reduce f = Seq.reduce f . ToSeq.toSeq

let unfold = Seq.unfold

let range from to = unfold (fn i -> if i < to then i : i + 1) from

--let gt x y = x > y
let take n = map cdr . zip (range 0 n)
let drop n = map cdr . filter (fn (x:_) -> x >= n) . zip (range 0 inf)

let rec any? f l =
  unless let x:xs = l then false
  else f x || any? f xs
let any? f = any? f . list

let rec all? f l =
  unless let x:xs = l then true
  else f x && all? f xs
let all? f = all? f . list

let join sep = reduce \acc x -> acc ++ sep ++ x

--impl Add for Seq =
  --let add lhs rhs =
    --if rhs is ToSeq
    --then map (uncurry (+)) $ zip lhs rhs
    --else map (\x -> x + rhs) lhs
  --let radd rhs lhs = map (\x -> lhs + x) rhs
--end
--impl Sub for Seq =
  --let sub lhs rhs =
    --if rhs is ToSeq
    --then map (uncurry (-)) $ zip lhs rhs
    --else map (\x -> x - rhs) lhs
  --let rsub rhs lhs = map (\x -> lhs - x) rhs
--end

--impl Add for Cons =
  --let add  lhs rhs = list $ ToSeq.toSeq lhs + rhs
  --let radd rhs lhs = list $ lhs + ToSeq.toSeq rhs
--end
--impl Sub for Cons =
  --let sub  lhs rhs = list $ ToSeq.toSeq lhs - rhs
  --let rsub rhs lhs = list $ lhs - ToSeq.toSeq rhs
--end

--impl Add for Array =
  --let add  lhs rhs = Array.ofSeq $ ToSeq.toSeq lhs + rhs
  --let radd rhs lhs = Array.ofSeq $ lhs + ToSeq.toSeq rhs
--end
--impl Sub for Array =
  --let sub  lhs rhs = Array.ofSeq $ ToSeq.toSeq lhs - rhs
  --let rsub rhs lhs = Array.ofSeq $ lhs - ToSeq.toSeq rhs
--end

--------------------------------------------------------------------------------
-- I/O
--
let open path ..mode = __base_open path (car mode or "r")
let popen cmd ..mode = __base_popen cmd (car mode or "r")

let rewind = __base_rewind
let getpos = __base_getpos
let setpos = __base_setpos

let write x = printf "%w" x
let display x = printf "%d" x

let read = __base_read
let readline ..x = __base_readline (car x or stdin)
let readlines =
  array . unfold \file ->
    let line = readline file in
    if line then line : file

impl ToSeq for File =
  let toSeq = readlines
end
